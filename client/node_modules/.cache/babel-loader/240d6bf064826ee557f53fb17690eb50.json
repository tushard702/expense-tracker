{"ast":null,"code":"var _jsxFileName = \"/Users/tusgarg/Documents/expense-tracker-react/client/src/context/GlobalState.js\";\nimport React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\nimport axios from 'axios';\nconst initialState = {\n  transactions: []\n};\nexport const GlobalContext = createContext(initialState);\nexport const GlobalProvider = ({\n  children\n}) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  async function getTransactions(id) {\n    try {\n      const res = await axios.get('/api/v1/transactions');\n      dispatch({\n        type: 'GET_TRANSACTION',\n        payload: res.data.data\n      });\n    } catch (err) {\n      dispatch({\n        type: 'TRANSACTION_ERROR',\n        payload: err.response.data.error\n      });\n    }\n  }\n\n  async function deleteTransaction(id) {\n    try {\n      await axios.delete(`/api/v1/transactions/${id}`);\n      dispatch({\n        type: 'DELETE_TRANSACTION',\n        payload: id\n      });\n    } catch (err) {\n      dispatch({\n        type: 'TRANSACTION_ERROR',\n        payload: err.response.data.error\n      });\n    }\n  }\n\n  async function addTransaction(transaction) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.post('/api/v1/transactions', transaction, config);\n      dispatch({\n        type: 'ADD_TRANSACTION',\n        payload: res.data.data\n      });\n    } catch (err) {\n      dispatch({\n        type: 'TRANSACTION_ERROR',\n        payload: err.response.data.error\n      });\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(GlobalContext.Provider, {\n    value: {\n      transactions: state.transactions,\n      error: state.error,\n      loading: state.loading,\n      getTransactions,\n      deleteTransaction,\n      addTransaction\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, children);\n};","map":{"version":3,"sources":["/Users/tusgarg/Documents/expense-tracker-react/client/src/context/GlobalState.js"],"names":["React","createContext","useReducer","AppReducer","axios","initialState","transactions","GlobalContext","GlobalProvider","children","state","dispatch","getTransactions","id","res","get","type","payload","data","err","response","error","deleteTransaction","delete","addTransaction","transaction","config","headers","post","loading"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,UAA9B,QAA+C,OAA/C;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAE;AADG,CAArB;AAIA,OAAO,MAAMC,aAAa,GAAGN,aAAa,CAACI,YAAD,CAAnC;AAEP,OAAO,MAAMG,cAAc,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAe;AACzC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,UAAU,CAACC,UAAD,EAAaE,YAAb,CAApC;;AAEA,iBAAeO,eAAf,CAA+BC,EAA/B,EAAkC;AAE9B,QAAI;AACA,YAAMC,GAAG,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAU,sBAAV,CAAlB;AACAJ,MAAAA,QAAQ,CAAC;AACLK,QAAAA,IAAI,EAAE,iBADD;AAELC,QAAAA,OAAO,EAAEH,GAAG,CAACI,IAAJ,CAASA;AAFb,OAAD,CAAR;AAIH,KAND,CAME,OAAOC,GAAP,EAAY;AACVR,MAAAA,QAAQ,CAAC;AACLK,QAAAA,IAAI,EAAE,mBADD;AAELC,QAAAA,OAAO,EAAEE,GAAG,CAACC,QAAJ,CAAaF,IAAb,CAAkBG;AAFtB,OAAD,CAAR;AAIH;AAEJ;;AAED,iBAAeC,iBAAf,CAAiCT,EAAjC,EAAqC;AACjC,QAAI;AACF,YAAMT,KAAK,CAACmB,MAAN,CAAc,wBAAuBV,EAAG,EAAxC,CAAN;AAEAF,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAE,oBADC;AAEPC,QAAAA,OAAO,EAAEJ;AAFF,OAAD,CAAR;AAID,KAPD,CAOE,OAAOM,GAAP,EAAY;AACZR,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAE,mBADC;AAEPC,QAAAA,OAAO,EAAEE,GAAG,CAACC,QAAJ,CAAaF,IAAb,CAAkBG;AAFpB,OAAD,CAAR;AAID;AACF;;AAED,iBAAeG,cAAf,CAA8BC,WAA9B,EAA2C;AACzC,UAAMC,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;;AAMA,QAAI;AACF,YAAMb,GAAG,GAAG,MAAMV,KAAK,CAACwB,IAAN,CAAW,sBAAX,EAAmCH,WAAnC,EAAgDC,MAAhD,CAAlB;AAEAf,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAE,iBADC;AAEPC,QAAAA,OAAO,EAAEH,GAAG,CAACI,IAAJ,CAASA;AAFX,OAAD,CAAR;AAID,KAPD,CAOE,OAAOC,GAAP,EAAY;AACZR,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAE,mBADC;AAEPC,QAAAA,OAAO,EAAEE,GAAG,CAACC,QAAJ,CAAaF,IAAb,CAAkBG;AAFpB,OAAD,CAAR;AAID;AACF;;AAEH,sBACI,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAI;AAC7Bf,MAAAA,YAAY,EAAEI,KAAK,CAACJ,YADS;AAE7Be,MAAAA,KAAK,EAAEX,KAAK,CAACW,KAFgB;AAG7BQ,MAAAA,OAAO,EAAEnB,KAAK,CAACmB,OAHc;AAI7BjB,MAAAA,eAJ6B;AAK7BU,MAAAA,iBAL6B;AAM7BE,MAAAA;AAN6B,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQKf,QARL,CADJ;AAYH,CAtEM","sourcesContent":["import React, {createContext, useReducer} from 'react';\nimport AppReducer from './AppReducer';\nimport axios from 'axios';\n\nconst initialState = {\n    transactions: []\n}\n\nexport const GlobalContext = createContext(initialState);\n\nexport const GlobalProvider = ({children}) =>{\n    const [state, dispatch] = useReducer(AppReducer, initialState);\n\n    async function getTransactions(id){\n        \n        try {\n            const res = await axios.get('/api/v1/transactions')\n            dispatch({\n                type: 'GET_TRANSACTION',\n                payload: res.data.data\n            });\n        } catch (err) {\n            dispatch({\n                type: 'TRANSACTION_ERROR',\n                payload: err.response.data.error\n              });\n        }\n\n    }\n    \n    async function deleteTransaction(id) {\n        try {\n          await axios.delete(`/api/v1/transactions/${id}`);\n    \n          dispatch({\n            type: 'DELETE_TRANSACTION',\n            payload: id\n          });\n        } catch (err) {\n          dispatch({\n            type: 'TRANSACTION_ERROR',\n            payload: err.response.data.error\n          });\n        }\n      }\n\n      async function addTransaction(transaction) {\n        const config = {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n    \n        try {\n          const res = await axios.post('/api/v1/transactions', transaction, config);\n    \n          dispatch({\n            type: 'ADD_TRANSACTION',\n            payload: res.data.data\n          });\n        } catch (err) {\n          dispatch({\n            type: 'TRANSACTION_ERROR',\n            payload: err.response.data.error\n          });\n        }\n      }\n\n    return(\n        <GlobalContext.Provider value ={ {\n            transactions: state.transactions,\n            error: state.error,\n            loading: state.loading,\n            getTransactions,\n            deleteTransaction,\n            addTransaction\n            } }>\n            {children}\n        </GlobalContext.Provider>\n    );\n}"]},"metadata":{},"sourceType":"module"}