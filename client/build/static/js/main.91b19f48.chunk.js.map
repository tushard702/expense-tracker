{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","utils/format.js","components/Balance.js","components/IncomeExpense.js","components/Transaction.js","components/TransactionList.js","components/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","action","type","loading","transactions","payload","filter","transaction","_id","error","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","id","a","axios","get","res","data","response","delete","config","headers","post","Provider","value","getTransactions","deleteTransaction","addTransaction","numberWithCommas","x","toString","replace","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","IncomeExpense","amounts","income","expense","className","Math","abs","Transaction","sign","text","onClick","TransactionList","useEffect","key","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","parseInt","htmlFor","placeholder","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.91b19f48.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Header() {\n    return (\n        <h2>\n            Expense Tracker\n        </h2>\n    );\n}\n","  export default (state, action) => {\n    switch(action.type) {\n        case 'GET_TRANSACTION':\n            return {\n                ...state,\n                loading: false,\n                transactions: action.payload\n            }\n\n        case 'DELETE_TRANSACTION':\n            return {\n                ...state,\n                transactions: state.transactions.filter(transaction => transaction._id !== action.payload)\n            }\n        \n        case 'ADD_TRANSACTION':\n            return {\n                ...state,\n                transactions: [...state.transactions, action.payload]\n            }\n\n        case 'TRANSACTION_ERROR':\n            return {\n                ...state,\n                error: action.payload\n            }\n        \n        default:\n            return state;\n    }\n}","import React, {createContext, useReducer} from 'react';\nimport AppReducer from './AppReducer';\nimport axios from 'axios';\n\nconst initialState = {\n    transactions: []\n}\n\nexport const GlobalContext = createContext(initialState);\n\nexport const GlobalProvider = ({children}) =>{\n    const [state, dispatch] = useReducer(AppReducer, initialState);\n\n    async function getTransactions(id){\n        \n        try {\n            const res = await axios.get('/api/v1/transactions')\n            dispatch({\n                type: 'GET_TRANSACTION',\n                payload: res.data.data\n            });\n        } catch (err) {\n            dispatch({\n                type: 'TRANSACTION_ERROR',\n                payload: err.response.data.error\n              });\n        }\n\n    }\n    \n    async function deleteTransaction(id) {\n        try {\n          await axios.delete(`/api/v1/transactions/${id}`);\n    \n          dispatch({\n            type: 'DELETE_TRANSACTION',\n            payload: id\n          });\n        } catch (err) {\n          dispatch({\n            type: 'TRANSACTION_ERROR',\n            payload: err.response.data.error\n          });\n        }\n      }\n\n      async function addTransaction(transaction) {\n        const config = {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n    \n        try {\n          const res = await axios.post('/api/v1/transactions', transaction, config);\n    \n          dispatch({\n            type: 'ADD_TRANSACTION',\n            payload: res.data.data\n          });\n        } catch (err) {\n          dispatch({\n            type: 'TRANSACTION_ERROR',\n            payload: err.response.data.error\n          });\n        }\n      }\n\n    return(\n        <GlobalContext.Provider value ={ {\n            transactions: state.transactions,\n            error: state.error,\n            loading: state.loading,\n            getTransactions,\n            deleteTransaction,\n            addTransaction\n            } }>\n            {children}\n        </GlobalContext.Provider>\n    );\n}","export function numberWithCommas(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }","import React, {useContext} from 'react'\nimport { GlobalContext } from '../context/GlobalState';\nimport { numberWithCommas } from '../utils/format';\n\nexport default function Balance() {\n    const {transactions} = useContext(GlobalContext); \n    const amounts = transactions.map(transaction => transaction.amount);\n    const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\n    return (\n        <>\n            <h4>Your Balance</h4>\n            <h1>${numberWithCommas(total)}</h1>\n        </>\n    )\n}\n","import React, {useContext} from 'react'\nimport { GlobalContext } from '../context/GlobalState';\nimport { numberWithCommas } from '../utils/format';\n\nexport default function IncomeExpense() {\n\n    const {transactions} = useContext(GlobalContext); \n    const amounts = transactions.map(transaction => transaction.amount);\n    const income = amounts\n    .filter(item => item >= 0)\n    .reduce((acc, item) => (acc += item), 0)\n    .toFixed(2);\n\n    const expense = amounts\n    .filter(item => item < 0)\n    .reduce((acc, item) => (acc += item), 0)\n    .toFixed(2);\n\n    return (\n        <div className=\"inc-exp-container\">\n            <div>\n                <h4>Income</h4>\n                <p className=\"money plus\">${numberWithCommas(income)}</p>\n            </div>\n            <div>\n                <h4>Expense</h4>\n                <p className=\"money minus\">${numberWithCommas(Math.abs(expense))}</p>\n            </div>\n      </div>\n    )\n}\n","import React, {useContext} from 'react'\nimport { GlobalContext } from '../context/GlobalState';\nimport { numberWithCommas } from '../utils/format';\n\nexport default function Transaction({transaction}) {\n    \n    const sign = transaction.amount < 0 ? '-' : '+';\n    const {deleteTransaction} = useContext(GlobalContext); \n\n    return (\n        <li className={transaction.amount < 0 ? 'minus' : 'plus'}>\n                {transaction.text} <span>{sign}${numberWithCommas(Math.abs(transaction.amount))}</span>\n                <button className=\"delete-btn\" onClick={()=>deleteTransaction(transaction._id)} >x</button>\n        </li>\n    )\n}\n","import React, {useContext, useEffect} from 'react'\nimport { GlobalContext } from '../context/GlobalState';\nimport Transaction from './Transaction';\n\nexport default function TransactionList() {\n    \n    const {transactions, getTransactions} = useContext(GlobalContext);\n    useEffect(() => {\n        getTransactions();\n      }, []);\n\n    return (\n    <>\n        <h3>History</h3>\n        <ul className=\"list\">\n            {transactions.map(transaction => (<Transaction \n                transaction = {transaction}\n                key = {transaction.id}\n            />))}\n        </ul>\n    </>\n    );\n}\n","import React, {useContext, useState} from 'react'\nimport { GlobalContext } from '../context/GlobalState';\n\nexport default function AddTransaction() {\n\n    const [text, setText] = useState('');\n    const [amount, setAmount] = useState(0);\n    const {addTransaction} = useContext(GlobalContext); \n    const handleSubmit = e =>{\n        e.preventDefault();\n\n        const newTransaction = {\n            id: Math.floor(Math.random()*1000000),\n            text,\n            amount: parseInt(amount),\n        }\n\n        addTransaction(newTransaction);\n        setText('');\n        setAmount('');\n    }\n\n    return (\n        <>\n            <h3>Add new transaction</h3>\n            <form onSubmit = {handleSubmit}>\n                <div className=\"form-control\">\n                    <label htmlFor=\"text\">Text</label>\n                    <input \n                        type=\"text\" \n                        placeholder=\"Enter text...\" \n                        value={text}\n                        onChange={(e)=>setText(e.target.value)}\n                    />\n                </div>\n                <div className=\"form-control\">\n                    <label htmlFor=\"amount\">Amount <br />\n                        (negative - expense, positive - income)\n                    </label>\n                    <input \n                        type=\"number\" \n                        placeholder=\"Enter amount...\" \n                        value={amount}\n                        onChange={(e)=>setAmount(e.target.value)}\n                    />\n                 </div>\n                <button className=\"btn\">Add transaction</button>\n            </form>\n        </>\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Balance from './components/Balance';\nimport IncomeExpense from './components/IncomeExpense';\nimport TransactionList from './components/TransactionList';\nimport AddTransaction from './components/AddTransaction';\nimport { GlobalProvider } from './context/GlobalState';\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <Header />\n      <div className='container'>\n        <Balance />\n        <IncomeExpense />\n        <TransactionList />\n        <AddTransaction />\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}